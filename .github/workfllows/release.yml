name: 'C++ CI'  # Название рабочего процесса

on:
  push:  # Запускает процесс при событии push
    branches:
      - main  # Для ветки main
      - feature/github_actions  # Для веток с названием feature/github_actions

permissions:
  contents: write  # Права на запись в репозиторий

jobs:
  build:  # Определение задачи сборки
    strategy:
      matrix:  # Использует матрицу для запуска на нескольких ОС
        os: [ubuntu-latest, macos-latest]  # Указывает, что задача будет выполняться на Ubuntu и macOS
    runs-on: ${{ matrix.os }}  # Запускает задачу на ОС, указанной в матрице

    steps:  # Шаги выполнения задачи
      - uses: actions/checkout@v3  # Проверяет код репозитория
        with:
          submodules: true  # Включает подмодули при проверке

      - name: Install dependencies on Linux  # Установка зависимостей для Linux
        if: ${{ runner.os == 'Linux' }}  # Условие для выполнения только на Linux
        run: |  # Выполняет следующие команды в оболочке
          sudo apt-get update  # Обновляет список пакетов
          sudo apt-get install -y g++  # Устанавливает компилятор g++
          
      - name: Install dependencies on macOS  # Установка зависимостей для macOS
        if: ${{ runner.os == 'macOS' }}  # Условие для выполнения только на macOS
        run: |  
          brew update  # Обновляет Homebrew
          brew install gcc  # Устанавливает компилятор g++

      - name: Build the project  # Сборка проекта
        run: |  
          g++ -o main main.cpp  # Сборка проекта с использованием g++
          
      - name: Run the project  # Запуск проекта
        run: |  
          ./main  # Запускает исполняемый файл

      - name: Create Release for Linux  # Создание релиза для Linux
        if: ${{ runner.os == 'Linux' }}  # Условие для выполнения только на Linux
        id: create_release_linux  # Уникальный идентификатор для этого шага
        uses: actions/create-release@v1  # Использует действие для создания релиза на GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Токен доступа к GitHub из секретов репозитория
        with:
          tag_name: "linux-${{ github.run_number }}"  # Имя тега релиза (например, linux-1)
          release_name: "Release Linux ${{ github.run_number }}"  # Название релиза (например, Release Linux 1)
          draft: false  # Не создавать черновик релиза
          prerelease: false  # Не делать предварительный релиз

      - name: Upload Release Asset (Linux)  # Загрузка артефакта релиза для Linux
        if: ${{ runner.os == 'Linux' }}  # Условие для выполнения только на Linux
        uses: actions/upload-release-asset@v1  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Токен доступа к GitHub
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}  
          asset_path: ./main  # Путь к исполняемому файлу
          asset_name: main  # Имя артефакта
          asset_content_type: application/octet-stream  # Тип контента для исполняемого файла

      - name: Create Release for macOS  # Создание релиза для macOS
        if: ${{ runner.os == 'macOS' }}  # Условие для выполнения только на macOS
        id: create_release_macos   # Уникальный идентификатор для этого шага
        uses: actions/create-release@v1  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        with:
          tag_name: "macos-${{ github.run_number }}"   # Имя тега для релиза, основанное на номере запуска GitHub Actions
          release_name: "Release macOS ${{ github.run_number }}"  
          draft: false   # Указывает, что релиз не должен быть черновиком
          prerelease: false  # Указывает, что релиз не является предварительным

      - name